name: CI

on:
  push:
    branches: ["**"]
  pull_request:

jobs:
  lint:
    name: Lint (black & flake8)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install tools
        run: |
          python -m pip install --upgrade pip
          pip install black flake8

      - name: Run black --check
        run: black --check .

      - name: Run flake8
        run: flake8 .

  unit:
    name: Unit tests + coverage
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run unit tests with coverage
        run: |
          mkdir -p reports
          pytest -m "not e2e" --maxfail=1 -q \
            --cov=src --cov-report=xml:reports/coverage.xml --cov-report=html:htmlcov \
            --html=reports/unit_report.html --self-contained-html

      - name: Upload unit artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-artifacts
          path: |
            reports/unit_report.html
            reports/coverage.xml
            htmlcov/**
          if-no-files-found: warn

  e2e:
    name: E2E (headless, Chrome, xdist)
    runs-on: ubuntu-latest
    needs: unit
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create .env from repo secrets/variables
        run: |
          cat > .env <<'EOF'
          # Browser options: chrome | firefox
          BROWSER=${{ vars.BROWSER || 'chrome' }}
          HEADLESS=true
          BASE_URL=https://www.saucedemo.com
          DEFAULT_TIMEOUT=10
          # Disable the pre-run check (set to true/1/yes to skip)
          SKIP_PRERUN_CHECK=false

          # USERS
          E2E_DEFAULT_USER=${{ secrets.E2E_DEFAULT_USER }}
          E2E_USERS_JSON=${{ secrets.E2E_USERS_JSON }}
          # Or separately:
          # E2E_PASSWORD_standard_user=${{ secrets.E2E_PASSWORD_standard_user }}
          EOF
          echo "Created .env"
          echo "---- .env (safe preview) ----"
          grep -E '^(BROWSER|HEADLESS|BASE_URL|DEFAULT_TIMEOUT|SKIP_PRERUN_CHECK)=' .env || true
          echo "E2E_DEFAULT_USER present: $(grep -c '^E2E_DEFAULT_USER=' .env)"
          echo "E2E_USERS_JSON present:   $(grep -c '^E2E_USERS_JSON=' .env)"

      - name: Run E2E smoke tests
        run: |
          set -euo pipefail
          mkdir -p reports artifacts/screenshots
          echo "Running smoke on ${BROWSER:-unset}, headless=${HEADLESS:-unset}"
          pytest -m "e2e and smoke" -q \
            --html=reports/e2e_report.html --self-contained-html

      - name: Upload E2E artifacts (HTML + screenshots)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-artifacts
          path: |
            reports/e2e_report.html
            artifacts/screenshots/**
          if-no-files-found: warn

      - name: Upload Allure results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results
          path: reports/allure-results
          if-no-files-found: warn

  deploy-allure:
    name: Deploy Allure Report
    runs-on: ubuntu-latest
    needs: e2e
    if: always()
    steps:
      - uses: actions/checkout@v4

      - name: Download allure results
        uses: actions/download-artifact@v4
        with:
          name: allure-results
          path: reports/allure-results

      - name: Generate Allure report
        run: |
          npm install -g allure-commandline --save-dev
          allure generate reports/allure-results --clean -o reports/allure-report

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: reports/allure-report
