name: CI

on:
  workflow_dispatch:
  push:
    branches: [ main, master, feature/** ]
  pull_request:
    branches: [ main, master ]

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  lint:
    name: Lint (black & flake8)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: black --check
        run: black --check .
      - name: flake8
        run: flake8 src tests

  unit:
    name: Unit tests + coverage
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Use .env.example
        run: cp .env.example .env
      - name: Run unit tests with coverage
        run: |
          pytest tests/unit --cov=src --cov-report=term-missing \
            --cov-report=xml:reports/coverage/coverage.xml
      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: reports/coverage/coverage.xml
          if-no-files-found: error
          retention-days: 7

  e2e:
    name: E2E (headless, Chrome/Firefox, xdist)
    runs-on: ubuntu-latest
    needs: unit
    env:
      BROWSER: ${{ vars.BROWSER }}
      HEADLESS: ${{ vars.HEADLESS }}
      BASE_URL: ${{ vars.BASE_URL }}
      DEFAULT_TIMEOUT: ${{ vars.DEFAULT_TIMEOUT }}
      SKIP_PRERUN_CHECK: ${{ vars.SKIP_PRERUN_CHECK }}
      E2E_DEFAULT_USER: ${{ secrets.E2E_DEFAULT_USER }}
      E2E_PASSWORD_standard_user: ${{ secrets.E2E_PASSWORD_standard_user }}
      E2E_USERS_JSON: ${{ secrets.E2E_USERS_JSON }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Browsers via apt (without third-party actions)
      - name: Install Google Chrome (if BROWSER is chrome or empty)
        if: ${{ !env.BROWSER || env.BROWSER == 'chrome' }}
        run: |
          set -eux
          sudo apt-get update
          sudo apt-get install -y wget gnupg
          wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo gpg --dearmor -o /usr/share/keyrings/google-linux.gpg
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/google-linux.gpg] http://dl.google.com/linux/chrome/deb/ stable main" | \
            sudo tee /etc/apt/sources.list.d/google-chrome.list
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
          google-chrome --version

      - name: Install Firefox (if BROWSER is firefox)
        if: ${{ env.BROWSER == 'firefox' }}
        run: |
          set -eux
          sudo apt-get update
          # Устанавливаем Firefox из PPA, чтобы он был deb, а не snap
          sudo apt-get install -y software-properties-common
          sudo add-apt-repository -y ppa:mozillateam/ppa
          echo 'Package: *\nPin: release o=LP-PPA-mozillateam\nPin-Priority: 1001' | \
            sudo tee /etc/apt/preferences.d/mozilla
          sudo apt-get update
          sudo apt-get install -y firefox
          firefox --version

      - name: Create .env from GitHub Secrets/Vars (e2e)
        run: |
          cat > .env <<'EOF'
          BROWSER=${BROWSER:-chrome}
          HEADLESS=${HEADLESS:-true}
          BASE_URL=${BASE_URL:-https://www.saucedemo.com}
          DEFAULT_TIMEOUT=${DEFAULT_TIMEOUT:-10}
          SKIP_PRERUN_CHECK=${SKIP_PRERUN_CHECK:-false}
          E2E_DEFAULT_USER=${E2E_DEFAULT_USER}
          E2E_PASSWORD_standard_user=${E2E_PASSWORD_standard_user}
          E2E_USERS_JSON=${E2E_USERS_JSON}
          EOF
          echo "----- .env -----"; sed 's/=\(.*\)/=<hidden>/' .env; echo "---------------"

      - name: Run smoke (HTML report)
        run: |
          set -eux
          EXTRA=""
          if [ "${HEADLESS}" = "true" ] || [ "${HEADLESS}" = "1" ]; then EXTRA="--headless"; fi
          pytest -m "smoke" --browser="${BROWSER:-chrome}" ${EXTRA} \
            --html=reports/report.html --self-contained-html -n auto

      - name: Run e2e/regression (Allure raw results)
        run: |
          set -eux
          EXTRA=""
          if [ "${HEADLESS}" = "true" ] || [ "${HEADLESS}" = "1" ]; then EXTRA="--headless"; fi
          pytest -m "e2e or regression" --browser="${BROWSER:-chrome}" ${EXTRA} \
            --alluredir=reports/allure-results -n auto

      - name: Upload HTML report
        uses: actions/upload-artifact@v4
        with:
          name: html-report
          path: reports/report.html
          if-no-files-found: warn
          retention-days: 7

      - name: Upload Allure results
        uses: actions/upload-artifact@v4
        with:
          name: allure-results
          path: reports/allure-results/
          if-no-files-found: ignore
          retention-days: 7

      - name: Upload screenshots (on failures)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: screenshots
          path: artifacts/screenshots/
          if-no-files-found: ignore
          retention-days: 7

  allure_pages:
    name: Publish Allure to GitHub Pages
    runs-on: ubuntu-latest
    needs: e2e
    steps:
      - uses: actions/checkout@v4

      - name: Download Allure results
        uses: actions/download-artifact@v4
        with:
          name: allure-results
          path: allure-results

      # Download Allure CLI without actions (wget + unzip) and generate statics
      - name: Generate Allure report (local CLI)
        run: |
          set -eux
          sudo apt-get update
          sudo apt-get install -y default-jre wget unzip
          ALLURE_VERSION=2.29.0
          wget -q https://github.com/allure-framework/allure2/releases/download/${ALLURE_VERSION}/allure-${ALLURE_VERSION}.zip
          unzip -q allure-${ALLURE_VERSION}.zip
          ./allure-${ALLURE_VERSION}/bin/allure generate allure-results --clean -o allure-report
          test -f allure-report/index.html

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: allure-report

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
