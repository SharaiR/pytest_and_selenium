name: CI

on:
  workflow_dispatch:
  push:
    branches: [ main, master, feature/** ]
  pull_request:
    branches: [ main, master ]

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  lint:
    name: Lint (black & flake8)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: black --check
        run: black --check .
      - name: flake8
        run: flake8 src tests

  unit:
    name: Unit tests + coverage
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Use .env.example
        run: cp .env.example .env
      - name: Run unit tests with coverage
        run: |
          pytest tests/unit --cov=src --cov-report=term-missing \
            --cov-report=xml:reports/coverage/coverage.xml
      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: reports/coverage/coverage.xml
          if-no-files-found: error
          retention-days: 7

  e2e:
    name: E2E (headless, Chrome/Firefox, xdist)
    runs-on: ubuntu-latest
    needs: unit
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install Google Chrome (if BROWSER is chrome or empty)
        if: ${{ !vars.BROWSER || vars.BROWSER == 'chrome' }}
        uses: browser-actions/setup-chrome@v1

      - name: Install Firefox (if BROWSER is firefox)
        if: ${{ vars.BROWSER == 'firefox' }}
        uses: browser-actions/setup-firefox@v1

      - name: Create .env from GitHub Secrets/Vars (e2e)
        shell: bash
        run: |
          cat > .env <<'EOF'
          BROWSER=${{ vars.BROWSER || 'chrome' }}
          HEADLESS=${{ vars.HEADLESS || 'true' }}
          BASE_URL=${{ vars.BASE_URL || 'https://www.saucedemo.com' }}
          DEFAULT_TIMEOUT=${{ vars.DEFAULT_TIMEOUT || '10' }}
          SKIP_PRERUN_CHECK=${{ vars.SKIP_PRERUN_CHECK || 'false' }}
          E2E_DEFAULT_USER=${{ secrets.E2E_DEFAULT_USER }}
          E2E_PASSWORD_standard_user=${{ secrets.E2E_PASSWORD_standard_user }}
          E2E_USERS_JSON=${{ secrets.E2E_USERS_JSON }}
          EOF

          echo "----- .env preview (safely) -----"
          sed -E 's/(PASSWORD_[^=]*=).*/\1<hidden>/; s/(E2E_USERS_JSON=).*/\1<hidden>/' .env
          echo "---------------------------------"

      - name: Run smoke (HTML report)
        shell: bash
        run: |
          set -euo pipefail
          set -a; source .env; set +a

          BROWSER="${BROWSER:-chrome}"
          H="${HEADLESS:-true}"; H="${H,,}"

          EXTRA=""
          if [[ "$H" == "true" || "$H" == "1" || "$H" == "yes" ]]; then
            EXTRA="--headless"
          fi

          echo "Browser: $BROWSER | Headless: $H | Extra: $EXTRA"
          pytest -m "smoke" --browser="$BROWSER" $EXTRA \
            --html=reports/report.html --self-contained-html -n auto

      - name: Run e2e/regression (Allure raw results)
        shell: bash
        run: |
          set -euo pipefail
          set -a; source .env; set +a

          BROWSER="${BROWSER:-chrome}"
          H="${HEADLESS:-true}"; H="${H,,}"

          EXTRA=""
          if [[ "$H" == "true" || "$H" == "1" || "$H" == "yes" ]]; then
            EXTRA="--headless"
          fi

          pytest -m "e2e or regression" --browser="$BROWSER" $EXTRA \
            --alluredir=reports/allure-results -n auto

      - name: Upload HTML report
        uses: actions/upload-artifact@v4
        with:
          name: html-report
          path: reports/report.html
          if-no-files-found: warn
          retention-days: 7

      - name: Upload Allure results
        uses: actions/upload-artifact@v4
        with:
          name: allure-results
          path: reports/allure-results/
          if-no-files-found: ignore
          retention-days: 7

      - name: Upload screenshots (on failures)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: screenshots
          path: artifacts/screenshots/
          if-no-files-found: ignore
          retention-days: 7
