name: CI

on:
  workflow_dispatch:
  push:
    branches: [ main, master, feature/** ]
  pull_request:
    branches: [ main, master ]

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  lint:
    name: Lint (black & flake8)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: black --check
        run: black --check .
      - name: flake8
        run: flake8 src tests

  unit:
    name: Unit tests + coverage
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Use .env.example
        run: cp .env.example .env
      - name: Run unit tests with coverage
        run: |
          pytest tests/unit --cov=src --cov-report=term-missing \
            --cov-report=xml:reports/coverage/coverage.xml
      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: reports/coverage/coverage.xml
          if-no-files-found: error
          retention-days: 7

  e2e:
    name: E2E (headless, xdist)
    runs-on: ubuntu-latest
    needs: unit
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Installing browsers via verified actions
      - name: Setup Chrome (if chosen)
        if: ${{ !vars.BROWSER || vars.BROWSER == 'chrome' }}
        uses: browser-actions/setup-chrome@v1
      - name: Setup Firefox (if chosen)
        if: ${{ vars.BROWSER == 'firefox' }}
        uses: browser-actions/setup-firefox@v1

      - name: Create .env from GitHub Secrets/Vars (e2e)
        run: |
          {
            echo "BROWSER=${{ vars.BROWSER }}"
            echo "HEADLESS=${{ vars.HEADLESS }}"
            echo "BASE_URL=${{ vars.BASE_URL }}"
            echo "DEFAULT_TIMEOUT=${{ vars.DEFAULT_TIMEOUT || '10' }}"
            echo "SKIP_PRERUN_CHECK=${{ vars.SKIP_PRERUN_CHECK || 'false' }}"
            echo "E2E_DEFAULT_USER=${{ secrets.E2E_DEFAULT_USER }}"
            echo "E2E_PASSWORD_standard_user=${{ secrets.E2E_PASSWORD_standard_user }}"
            echo "E2E_USERS_JSON=${{ secrets.E2E_USERS_JSON }}"
          } > .env

      - name: Compute pytest options from vars
        id: opts
        shell: bash
        run: |
          B="${{ vars.BROWSER }}"
          H="${{ vars.HEADLESS }}"
          [ -z "$B" ] && B=chrome
          OPTS="--browser=${B}"
          if [ "${H,,}" = "true" ] || [ "${H}" = "1" ] || [ "${H,,}" = "yes" ]; then
            OPTS="$OPTS --headless"
          fi
          echo "PYTEST_OPTS=$OPTS" >> $GITHUB_OUTPUT

      - name: Run smoke (HTML report)
        run: |
          pytest -m "smoke" ${{ steps.opts.outputs.PYTEST_OPTS }} \
            --html=reports/report.html --self-contained-html -n auto

      - name: Run e2e/regression (Allure raw results)
        run: |
          pytest -m "e2e or regression" ${{ steps.opts.outputs.PYTEST_OPTS }} \
            --alluredir=reports/allure-results -n auto

      - name: Upload HTML report
        uses: actions/upload-artifact@v4
        with:
          name: html-report
          path: reports/report.html
          if-no-files-found: warn
          retention-days: 7

      - name: Upload Allure results
        uses: actions/upload-artifact@v4
        with:
          name: allure-results
          path: reports/allure-results/
          if-no-files-found: ignore
          retention-days: 7

  allure_pages:
    name: Publish Allure to GitHub Pages
    runs-on: ubuntu-latest
    needs: e2e
    steps:
      - uses: actions/checkout@v4
      - name: Download Allure results
        uses: actions/download-artifact@v4
        with:
          name: allure-results
          path: allure-results
      - name: Generate Allure report
        uses: simple-elf/allure-report-action@v1.7
        with:
          allure_results: allure-results
          allure_report: allure-report
          keep_reports: 5
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: allure-report
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
